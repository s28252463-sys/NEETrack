/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model.  Each user can only access their own data, preventing unauthorized access to other users' information.
 * @data_structure All user-specific data is nested under the `/users/{userId}` collection. This includes profile information, syllabus progress, and mock test results.
 * @key_security_decisions User listing is explicitly disallowed. All write operations are restricted to the owner of the corresponding user ID. Data model is not strictly validated.
 * @denormalization N/A
 * @structural_segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their own profile document.
     * @allow (get) User with uid 'user123' can read their own profile document.
     * @allow (update) User with uid 'user123' can update their own profile document.
     * @allow (delete) User with uid 'user123' can delete their own profile document.
     * @deny (get) User with uid 'otherUser' cannot read user with uid 'user123' profile document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to syllabus progress documents for a specific user.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) User with uid 'user123' can create their own syllabus progress document.
     * @allow (get) User with uid 'user123' can read their own syllabus progress document.
     * @allow (update) User with uid 'user123' can update their own syllabus progress document.
     * @allow (delete) User with uid 'user123' can delete their own syllabus progress document.
     * @deny (get) User with uid 'otherUser' cannot read user with uid 'user123' syllabus progress document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/syllabus {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

        /**
     * @description Controls access to pomodoro progress documents for a specific user.
     * @path /users/{userId}/progress/pomodoro
     * @allow (get) User with uid 'user123' can read their own pomodoro progress document.
     * @deny (get) User with uid 'otherUser' cannot read user with uid 'user123' pomodoro progress document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/pomodoro {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }


    /**
     * @description Controls access to mock test documents for a specific user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) User with uid 'user123' can create a mock test document under their user ID.
     * @allow (get) User with uid 'user123' can read their own mock test document.
     * @allow (update) User with uid 'user123' can update their own mock test document.
     * @allow (delete) User with uid 'user123' can delete their own mock test document.
     * @deny (get) User with uid 'otherUser' cannot read mock test document of user with uid 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mockTests/{testId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}