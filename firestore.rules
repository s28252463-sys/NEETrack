/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and associated data,
 *              while allowing public read access to study materials.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Only the user themselves can read/write.
 * - /users/{userId}/progress/syllabus: Stores syllabus progress. Only the user themselves can read/write.
 * - /users/{userId}/mockTests/{testId}: Stores mock test results. Only the user themselves can read/write.
 * - /users/{userId}/progress/pomodoro: Stores pomodoro progress. Only the user themselves can read/write.
 * - /studyMaterials/{subjectId}/topics/{topicId}: Stores study materials, publicly readable, only admins can write.
 *
 * Key Security Decisions:
 * - User profiles and related data (progress, mock tests, pomodoro) are strictly private and only accessible
 *   by the owning user.
 * - Study materials are publicly readable to facilitate easy access for all users. Write access to study
 *   materials is not defined and denied by default (TODO: clarify write access for study materials in future iterations).
 * - Listing of users is disallowed to prevent enumeration attacks.
 * - Data validation is minimal in this prototyping phase, focusing on ownership and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *    Request: { "auth": { "uid": "user123" }, "resource": { "data": { "uid": "user123", "email": "test@example.com", "createdAt": "2024-01-01T00:00:00Z" } } }
     * @allow (get) User with ID 'user123' can read their own profile.
     *    Request: { "auth": { "uid": "user123" } }
     * @allow (update) User with ID 'user123' can update their own profile.
     *    Request: { "auth": { "uid": "user123" } }
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *    Request: { "auth": { "uid": "user123" } }
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *    Request: { "auth": { "uid": "user456" }, "resource": { "data": { "uid": "user123", "email": "test@example.com", "createdAt": "2024-01-01T00:00:00Z" } } }
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user syllabus progress.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) User with ID 'user123' can create their own syllabus progress.
     *    Request: { "auth": { "uid": "user123" }, "resource": { "data": { "completedTopics": [] } } }
     * @allow (get) User with ID 'user123' can read their own syllabus progress.
     *    Request: { "auth": { "uid": "user123" } }
     * @allow (update) User with ID 'user123' can update their own syllabus progress.
     *    Request: { "auth": { "uid": "user123" } }
     * @allow (delete) User with ID 'user123' can delete their own syllabus progress.
     *    Request: { "auth": { "uid": "user123" } }
     * @deny (create) User with ID 'user456' cannot create syllabus progress for 'user123'.
     *    Request: { "auth": { "uid": "user456" }, "resource": { "data": { "completedTopics": [] } } }
     * @deny (get) User with ID 'user456' cannot read the syllabus progress of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @deny (update) User with ID 'user456' cannot update the syllabus progress of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @deny (delete) User with ID 'user456' cannot delete the syllabus progress of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/syllabus {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user mock test results.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) User with ID 'user123' can create their own mock test result.
     *    Request: { "auth": { "uid": "user123" }, "resource": { "data": { "name": "Test 1", "syllabus": "Math" } } }
     * @allow (get) User with ID 'user123' can read their own mock test result.
     *    Request: { "auth": { "uid": "user123" } }
     * @allow (update) User with ID 'user123' can update their own mock test result.
     *    Request: { "auth": { "uid": "user123" } }
     * @allow (delete) User with ID 'user123' can delete their own mock test result.
     *    Request: { "auth": { "uid": "user123" } }
     * @deny (create) User with ID 'user456' cannot create a mock test result for 'user123'.
     *    Request: { "auth": { "uid": "user456" }, "resource": { "data": { "name": "Test 1", "syllabus": "Math" } } }
     * @deny (get) User with ID 'user456' cannot read the mock test result of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @deny (update) User with ID 'user456' cannot update the mock test result of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @deny (delete) User with ID 'user456' cannot delete the mock test result of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mockTests/{testId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user pomodoro progress.
     * @path /users/{userId}/progress/pomodoro
     * @allow (create) User with ID 'user123' can create their own pomodoro progress.
     *    Request: { "auth": { "uid": "user123" }, "resource": { "data": { "sessions": [] } } }
     * @allow (get) User with ID 'user123' can read their own pomodoro progress.
     *    Request: { "auth": { "uid": "user123" } }
     * @allow (update) User with ID 'user123' can update their own pomodoro progress.
     *    Request: { "auth": { "uid": "user123" } }
     * @allow (delete) User with ID 'user123' can delete their own pomodoro progress.
     *    Request: { "auth": { "uid": "user123" } }
     * @deny (create) User with ID 'user456' cannot create pomodoro progress for 'user123'.
     *    Request: { "auth": { "uid": "user456" }, "resource": { "data": { "sessions": [] } } }
     * @deny (get) User with ID 'user456' cannot read the pomodoro progress of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @deny (update) User with ID 'user456' cannot update the pomodoro progress of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @deny (delete) User with ID 'user456' cannot delete the pomodoro progress of 'user123'.
     *    Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/pomodoro {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to study material.  Study materials are publicly readable.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get) Any user can read study materials.
     *    Request: { "auth": { "uid": "user123" } }
     * @allow (list) Any user can list study materials.
     *    Request: { "auth": { "uid": "user123" } }
     * @deny (create) No one can create study materials without proper authorization.
     *    Request: { "auth": { "uid": "user123" }, "resource": { "data": { "lectureUrl": "http://example.com" } } }
     * @deny (update) No one can update study materials without proper authorization.
     *    Request: { "auth": { "uid": "user123" } }
     * @deny (delete) No one can delete study materials without proper authorization.
     *    Request: { "auth": { "uid": "user123" } }
     * @principle Public read access with restricted writes.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check for study material writes
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}