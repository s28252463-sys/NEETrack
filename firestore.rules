/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user can only read and write their own data,
 *  and cannot access the data of other users unless explicitly permitted. Data shape is not validated during this prototyping phase.
 * @data_structure
 *  - /users/{userId}: Stores public profile information for each user.
 *  - /users/{userId}/progress/syllabus: Stores syllabus progress for each user.
 *  - /users/{userId}/mockTests/{testId}: Stores mock test data for each user.
 * @key_security_decisions
 *  - Users cannot list all users (or mock tests or syllabus).
 *  - Only authenticated users can access data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) A user can only get, update, or delete their own profile.
     * @deny (create) A user cannot create a profile with a userId that does not match their auth UID.
     * @deny (get, update, delete) A user cannot get, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to syllabus progress documents.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) A user can create their own syllabus progress if the userId matches their auth UID.
     * @allow (get, update, delete) A user can only get, update, or delete their own syllabus progress.
     * @deny (create) A user cannot create syllabus progress with a userId that does not match their auth UID.
     * @deny (get, update, delete) A user cannot get, update, or delete another user's syllabus progress.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/progress/syllabus {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to mock test documents.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) A user can create their own mock test if the userId matches their auth UID.
     * @allow (get, update, delete) A user can only get, update, or delete their own mock test.
     * @allow (list) A user can list their own mock tests.
     * @deny (create) A user cannot create a mock test with a userId that does not match their auth UID.
     * @deny (get, update, delete) A user cannot get, update, or delete another user's mock test.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/mockTests/{testId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}