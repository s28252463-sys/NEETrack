/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and associated data,
 *              while allowing public read access to study materials.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /users/{userId}/progress/syllabus: Tracks syllabus progress, accessible only to the user.
 * - /users/{userId}/mockTests/{testId}: Stores mock test results, accessible only to the user.
 * - /users/{userId}/progress/pomodoro: Stores Pomodoro progress, accessible only to the user.
 * - /studyMaterials/{subjectId}/topics/{topicId}: Stores public study materials, readable by anyone.
 *
 * Key Security Decisions:
 * - User profiles and all data nested under /users/{userId} are strictly private and only accessible to the owning user.
 * - Study materials are publicly readable but cannot be created, updated, or deleted through the client.
 * - Listing of user documents and subcollections is allowed only for the owning user to prevent unauthorized data discovery.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get, list, update, delete) - User with matching UID can read, update, and delete their profile.
     * @deny (create) - User cannot create a profile with a mismatched UID.
     * @deny (get, list, update, delete) - User cannot access or modify another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to syllabus progress documents.
     * @path /users/{userId}/progress/syllabus
     * @allow (create, get, list, update, delete) - User with matching UID can manage their syllabus progress.
     * @deny (create, get, list, update, delete) - User cannot access or modify another user's syllabus progress.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/progress/syllabus {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mock test documents.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create, get, list, update, delete) - User with matching UID can manage their mock test records.
     * @deny (create, get, list, update, delete) - User cannot access or modify another user's mock test records.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/mockTests/{testId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to pomodoro progress documents.
     * @path /users/{userId}/progress/pomodoro
     * @allow (create, get, list, update, delete) - User with matching UID can manage their pomodoro progress.
     * @deny (create, get, list, update, delete) - User cannot access or modify another user's pomodoro progress.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/progress/pomodoro {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to study material documents.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get, list) - All users can read study materials.
     * @deny (create, update, delete) - Only backend services should be able to create, update, and delete study materials.
     * @principle Allows public read access to study materials while restricting write access.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}