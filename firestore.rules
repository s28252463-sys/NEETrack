/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only read and write their own data,
 * with no public data or shared access between users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. The 'userId' must match the authenticated user's UID.
 * - /users/{userId}/progress/syllabus: Stores syllabus progress data for a specific user.
 * - /users/{userId}/mockTests/{testId}: Stores mock test records for a user.
 * - /users/{userId}/progress/pomodoro: Stores Pomodoro progress data for a user.
 *
 * Key Security Decisions:
 * - No public listing of users or their data.
 * - Users can only create their own profile.
 *
 * Denormalization for Authorization:
 * - The 'uid' field within each user document MUST match the document ID ('userId') to ensure
 *   that users cannot impersonate each other or create profiles for other users. This
 *   denormalization simplifies the security rules and improves performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.uid: 'user123'
     * @allow (get, update, delete) User with UID 'user123' can read/write their own profile.
     *    - request.auth.uid: 'user123'
     *    - resource.data.uid: 'user123'
     * @deny (create) User with UID 'user123' cannot create a profile for another user 'user456'.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.uid: 'user456'
     * @deny (get, update, delete) User with UID 'user123' cannot read/write another user's profile ('user456').
     *    - request.auth.uid: 'user123'
     *    - resource.data.uid: 'user456'
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to syllabus progress documents for a user.
     * @path /users/{userId}/progress/syllabus
     * @allow (get, list, create, update, delete) User with UID 'user123' can manage their own syllabus progress.
     *    - request.auth.uid: 'user123'
     * @deny (get, list, create, update, delete) User with UID 'user123' cannot manage another user's syllabus progress ('user456').
     *    - request.auth.uid: 'user123'
     *    - userId: 'user456'
     * @principle Enforces document ownership and prevents unauthorized access to syllabus progress data.
     */
    match /users/{userId}/progress/syllabus {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mock test documents for a user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (get, list, create, update, delete) User with UID 'user123' can manage their own mock test records.
     *    - request.auth.uid: 'user123'
     * @deny (get, list, create, update, delete) User with UID 'user123' cannot manage another user's mock test records ('user456').
     *    - request.auth.uid: 'user123'
     *    - userId: 'user456'
     * @principle Enforces document ownership and prevents unauthorized access to mock test data.
     */
    match /users/{userId}/mockTests/{testId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Pomodoro progress documents for a user.
     * @path /users/{userId}/progress/pomodoro
     * @allow (get, list, create, update, delete) User with UID 'user123' can manage their own Pomodoro progress.
     *    - request.auth.uid: 'user123'
     * @deny (get, list, create, update, delete) User with UID 'user123' cannot manage another user's Pomodoro progress ('user456').
     *    - request.auth.uid: 'user123'
     *    - userId: 'user456'
     * @principle Enforces document ownership and prevents unauthorized access to Pomodoro progress data.
     */
    match /users/{userId}/progress/pomodoro {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}