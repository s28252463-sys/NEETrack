/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /users/{userId}/progress/syllabus: Stores a user's syllabus progress.
 * - /users/{userId}/mockTests/{testId}: Stores individual mock test records for a user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data, syllabus progress, and mock test records.
 * - Listing users is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with uid "user123" can create their own profile document with matching uid.
     * @allow (get, update, delete) - User with uid "user123" can read, update, and delete their own profile document.
     * @deny (create) - User with uid "user456" cannot create a profile document for user "user123".
     * @deny (get, update, delete) - User with uid "user456" cannot read, update, or delete the profile document for user "user123".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to syllabus progress documents for a user.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) - User with uid "user123" can create their own syllabus progress document.
     * @allow (get, update, delete) - User with uid "user123" can read, update, and delete their own syllabus progress document.
     * @deny (create) - User with uid "user456" cannot create a syllabus progress document for user "user123".
     * @deny (get, update, delete) - User with uid "user456" cannot read, update, or delete the syllabus progress document for user "user123".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/syllabus {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mock test documents for a user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) - User with uid "user123" can create a mock test document under their user ID.
     * @allow (get, update, delete) - User with uid "user123" can read, update, and delete their own mock test document.
     * @deny (create) - User with uid "user456" cannot create a mock test document for user "user123".
     * @deny (get, update, delete) - User with uid "user456" cannot read, update, or delete the mock test document for user "user123".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mockTests/{testId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}