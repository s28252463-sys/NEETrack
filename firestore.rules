rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *   Request: auth.uid = 'user123', resource.data.uid = 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their own profile.
     *   Request: auth.uid = 'user123', resource.data.uid = 'user123'
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     *   Request: auth.uid = 'user456', resource.data.uid = 'user123'
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the profile of 'user123'.
     *   Request: auth.uid = 'user456', resource.data.uid = 'user123'
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to syllabus progress documents for a user.
     * @path /users/{userId}/progress/syllabus
     * @allow (create, get, update, delete) - User 'user123' can manage their own syllabus progress.
     *   Request: auth.uid = 'user123'
     * @deny (create, get, update, delete) - User 'user456' cannot manage syllabus progress for 'user123'.
     *   Request: auth.uid = 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/progress/syllabus {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to mock test documents for a user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create, get, update, delete) - User 'user123' can manage their own mock test records.
     *   Request: auth.uid = 'user123'
     * @deny (create, get, update, delete) - User 'user456' cannot manage mock test records for 'user123'.
     *   Request: auth.uid = 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/mockTests/{testId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /**
      * @description Controls access to pomodoro progress documents for a user.
      * @path /users/{userId}/progress/pomodoro
      * @allow (create, get, update, delete) - User 'user123' can manage their own pomodoro progress.
      *   Request: auth.uid = 'user123'
      * @deny (create, get, update, delete) - User 'user456' cannot manage pomodoro progress for 'user123'.
      *   Request: auth.uid = 'user456'
      * @principle Restricts access to a user's own data tree.
      */
    match /users/{userId}/progress/pomodoro {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to study material documents. Study materials are publicly readable but not writable.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get, list) - Any user (or unauthenticated user) can read study materials.
     *   Request: No auth required.
     * @deny (create, update, delete) - No user can create, update, or delete study materials.
     *   Request: Any auth state.
     * @principle Allows public read access to study materials while restricting write access.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}