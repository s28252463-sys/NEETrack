/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user-based authorization while relaxing data validation to facilitate rapid prototyping.
 * It enforces that users can only access their own data and that public data is truly public, without strict schema checks.
 *
 * Data Structure:
 * - `/users/{userId}`: User profiles, accessible only by the owning user.
 * - `/users/{userId}/progress/syllabus`: Syllabus progress, accessible only by the owning user.
 * - `/users/{userId}/mockTests/{testId}`: Mock test records, accessible only by the owning user.
 * - `/users/{userId}/progress/pomodoro`: Pomodoro progress, accessible only by the owning user.
 * - `/studyMaterials/{subjectId}/topics/{topicId}`: Study materials, publicly accessible for reading but write-protected.
 *
 * Key Security Decisions:
 * - No user listing: Listing all users is disallowed.
 * - Public read-only study materials: Study material is accessible to everyone for reading, but only writeable by a privileged admin (not implemented in this ruleset).
 *
 * Denormalization for Authorization:
 *   - The rules rely on the `request.auth.uid` to match the `userId` in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description User profiles are private and only accessible to the owning user.
     * @path /users/{userId}
     * @allow (create) User 'user123' creates their profile: auth.uid == 'user123'
     * @allow (get) User 'user123' reads their profile: auth.uid == 'user123'
     * @allow (update) User 'user123' updates their profile: auth.uid == 'user123'
     * @allow (delete) User 'user123' deletes their profile: auth.uid == 'user123'
     * @deny (create) User 'user456' tries to create profile for 'user123': auth.uid != 'user123'
     * @deny (get) User 'user456' tries to read profile of 'user123': auth.uid != 'user123'
     * @deny (update) User 'user456' tries to update profile of 'user123': auth.uid != 'user123'
     * @deny (delete) User 'user456' tries to delete profile of 'user123': auth.uid != 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Syllabus progress is private and only accessible to the owning user.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) User 'user123' creates their syllabus progress: auth.uid == 'user123'
     * @allow (get) User 'user123' reads their syllabus progress: auth.uid == 'user123'
     * @allow (update) User 'user123' updates their syllabus progress: auth.uid == 'user123'
     * @allow (delete) User 'user123' deletes their syllabus progress: auth.uid == 'user123'
     * @deny (create) User 'user456' tries to create syllabus progress for 'user123': auth.uid != 'user123'
     * @deny (get) User 'user456' tries to read syllabus progress of 'user123': auth.uid != 'user123'
     * @deny (update) User 'user456' tries to update syllabus progress of 'user123': auth.uid != 'user123'
     * @deny (delete) User 'user456' tries to delete syllabus progress of 'user123': auth.uid != 'user123'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/progress/syllabus {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Mock test records are private and only accessible to the owning user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) User 'user123' creates a mock test record: auth.uid == 'user123'
     * @allow (get) User 'user123' reads their mock test record: auth.uid == 'user123'
     * @allow (update) User 'user123' updates their mock test record: auth.uid == 'user123'
     * @allow (delete) User 'user123' deletes their mock test record: auth.uid == 'user123'
     * @deny (create) User 'user456' tries to create mock test record for 'user123': auth.uid != 'user123'
     * @deny (get) User 'user456' tries to read mock test record of 'user123': auth.uid != 'user123'
     * @deny (update) User 'user456' tries to update mock test record of 'user123': auth.uid != 'user123'
     * @deny (delete) User 'user456' tries to delete mock test record of 'user123': auth.uid != 'user123'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/mockTests/{testId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Pomodoro progress is private and only accessible to the owning user.
     * @path /users/{userId}/progress/pomodoro
     * @allow (create) User 'user123' creates their pomodoro progress: auth.uid == 'user123'
     * @allow (get) User 'user123' reads their pomodoro progress: auth.uid == 'user123'
     * @allow (update) User 'user123' updates their pomodoro progress: auth.uid == 'user123'
     * @allow (delete) User 'user123' deletes their pomodoro progress: auth.uid == 'user123'
     * @deny (create) User 'user456' tries to create pomodoro progress for 'user123': auth.uid != 'user123'
     * @deny (get) User 'user456' tries to read pomodoro progress of 'user123': auth.uid != 'user123'
     * @deny (update) User 'user456' tries to update pomodoro progress of 'user123': auth.uid != 'user123'
     * @deny (delete) User 'user456' tries to delete pomodoro progress of 'user123': auth.uid != 'user123'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/progress/pomodoro {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Study materials are publicly accessible for reading, but only writeable by admins.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get) Any user can read study materials.
     * @allow (list) Any user can list study materials.
     * @deny (create) No one can create study materials via client.
     * @deny (update) No one can update study materials via client.
     * @deny (delete) No one can delete study materials via client.
     * @principle Allows public reads, restricts writes.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation once admin functionality is implemented.
      allow update: if false; // TODO: Add admin role validation once admin functionality is implemented.
      allow delete: if false; // TODO: Add admin role validation once admin functionality is implemented.
    }
  }
}