rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile document at /users/user_abc, where request.resource.data.uid == request.auth.uid.
     * @allow (get, update, delete) User with UID 'user_abc' can get, update and delete their profile document at /users/user_abc.
     * @deny (create) User with UID 'user_abc' cannot create a profile for another user at /users/user_xyz.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot get, update and delete profile of another user at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to syllabus progress documents for a user.
     * @path /users/{userId}/progress/syllabus
     * @allow (create, get, update, delete) User with UID 'user_abc' can create, get, update, and delete their syllabus progress document at /users/user_abc/progress/syllabus.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot create, get, update and delete syllabus progress of another user at /users/user_abc/progress/syllabus.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/syllabus {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to mock test documents for a user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create, get, update, delete) User with UID 'user_abc' can create, get, update, and delete their mock test documents at /users/user_abc/mockTests/{testId}.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot create, get, update and delete mock test of another user at /users/user_abc/mockTests/{testId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mockTests/{testId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /**
      * @description Manages access to pomodoro progress documents for a user.
      * @path /users/{userId}/progress/pomodoro
      * @allow (create, get, update, delete) User with UID 'user_abc' can create, get, update, and delete their pomodoro progress document at /users/user_abc/progress/pomodoro.
      * @deny (create, get, update, delete) User with UID 'user_xyz' cannot create, get, update and delete pomodoro progress of another user at /users/user_abc/progress/pomodoro.
      * @principle Enforces document ownership for all operations.
      */
    match /users/{userId}/progress/pomodoro {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to study material documents. Study materials are publicly readable but writes are disallowed.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get, list) Any user can read study material.
     * @deny (create, update, delete) No user can create, update, or delete study material.  Writes are disallowed.
     * @principle Allows public read access while restricting write access.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}