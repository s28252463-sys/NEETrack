/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to study materials. Only authenticated
 * users can create, update, or delete their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information, accessible only to the user themselves.
 * - /users/{userId}/progress/syllabus: Stores syllabus progress, accessible only to the user.
 * - /users/{userId}/mockTests/{testId}: Stores mock test records, accessible only to the user.
 * - /users/{userId}/progress/pomodoro: Stores pomodoro progress, accessible only to the user.
 * - /studyMaterials/{subjectId}/topics/{topicId}: Stores publicly accessible study materials.
 *
 * Key Security Decisions:
 * - Users can only access their own profile and progress data.
 * - Study materials are publicly readable but not writable by clients.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 *  The rules rely on the `request.auth.uid` to match the `userId` path parameter in order
 *  to authorize access to user-specific data. This avoids costly `get()` calls.
 *
 * Structural Segregation:
 * Public study materials are stored in a separate top-level collection (`/studyMaterials`)
 * to allow for public read access without compromising the security of user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile with matching userId 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can access/modify their own profile.
     * @deny (create) - User with UID 'user_abc' cannot create a profile with userId 'user_xyz'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot access/modify the profile of user 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No user listing allowed

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages syllabus progress for a user.
     * @path /users/{userId}/progress/syllabus
     * @allow (create, get, update, delete) - User with UID 'user_abc' can manage their syllabus progress.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot manage the syllabus progress of user 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/progress/syllabus {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages mock test records for a user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create, get, update, delete) - User with UID 'user_abc' can manage their mock test records.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot manage the mock test records of user 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/mockTests/{testId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
          function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;

        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages pomodoro progress for a user.
     * @path /users/{userId}/progress/pomodoro
     * @allow (create, get, update, delete) - User with UID 'user_abc' can manage their pomodoro progress.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot manage the pomodoro progress of user 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/progress/pomodoro {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
          function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;

        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages study materials (publicly readable).
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get, list) - Any user can read study materials.
     * @deny (create, update, delete) - No user can create, update, or delete study materials through the client.
     * @principle Allows public read access with owner-only writes (backend only).
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}