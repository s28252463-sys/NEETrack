/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and related data.
 * Study materials are publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /users/{userId}/progress/syllabus: Syllabus progress, accessible only by the user themselves.
 * - /users/{userId}/mockTests/{testId}: Mock test results, accessible only by the user themselves.
 * - /users/{userId}/progress/pomodoro: Pomodoro progress, accessible only by the user themselves.
 * - /studyMaterials/{subjectId}/topics/{topicId}: Study materials, publicly accessible.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Listing of users is not allowed.
 * - Study materials are public and read-only.
 *
 * Denormalization for Authorization:
 *  - User-specific data is nested under /users/{userId} to easily enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with uid "user_abc" can create their profile if request.auth.uid == "user_abc".
     * @allow (get) User with uid "user_abc" can read their profile.
     * @allow (update) User with uid "user_abc" can update their profile.
     * @allow (delete) User with uid "user_abc" can delete their profile.
     * @deny (create) User with uid "user_xyz" cannot create a profile with document ID "user_abc".
     * @deny (get) User with uid "user_xyz" cannot read the profile of "user_abc".
     * @deny (update) User with uid "user_xyz" cannot update the profile of "user_abc".
     * @deny (delete) User with uid "user_xyz" cannot delete the profile of "user_abc".
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own syllabus progress.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) User with uid "user_abc" can create their syllabus progress.
     * @allow (get) User with uid "user_abc" can read their syllabus progress.
     * @allow (update) User with uid "user_abc" can update their syllabus progress.
     * @allow (delete) User with uid "user_abc" can delete their syllabus progress.
     * @deny (create) User with uid "user_xyz" cannot create syllabus progress for "user_abc".
     * @deny (get) User with uid "user_xyz" cannot read the syllabus progress of "user_abc".
     * @deny (update) User with uid "user_xyz" cannot update the syllabus progress of "user_abc".
     * @deny (delete) User with uid "user_xyz" cannot delete the syllabus progress of "user_abc".
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/progress/syllabus {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own mock test results.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) User with uid "user_abc" can create a mock test result.
     * @allow (get) User with uid "user_abc" can read their mock test results.
     * @allow (update) User with uid "user_abc" can update their mock test results.
     * @allow (delete) User with uid "user_abc" can delete their mock test results.
     * @deny (create) User with uid "user_xyz" cannot create a mock test result for "user_abc".
     * @deny (get) User with uid "user_xyz" cannot read the mock test results of "user_abc".
     * @deny (update) User with uid "user_xyz" cannot update the mock test results of "user_abc".
     * @deny (delete) User with uid "user_xyz" cannot delete the mock test results of "user_abc".
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/mockTests/{testId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own pomodoro progress.
     * @path /users/{userId}/progress/pomodoro
     * @allow (create) User with uid "user_abc" can create their pomodoro progress.
     * @allow (get) User with uid "user_abc" can read their pomodoro progress.
     * @allow (update) User with uid "user_abc" can update their pomodoro progress.
     * @allow (delete) User with uid "user_abc" can delete their pomodoro progress.
     * @deny (create) User with uid "user_xyz" cannot create pomodoro progress for "user_abc".
     * @deny (get) User with uid "user_xyz" cannot read the pomodoro progress of "user_abc".
     * @deny (update) User with uid "user_xyz" cannot update the pomodoro progress of "user_abc".
     * @deny (delete) User with uid "user_xyz" cannot delete the pomodoro progress of "user_abc".
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/progress/pomodoro {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read study materials. Only owner can edit it.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get) Any user can read study materials.
     * @allow (list) Any user can list study materials.
     * @principle Allows public read access to study materials.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}