/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and their related data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /users/{userId}/progress/syllabus: Tracks completed syllabus topics for a user.
 * - /users/{userId}/mockTests/{testId}: Stores mock test records for a user.
 * - /users/{userId}/progress/pomodoro: Stores pomodoro session counts for a user.
 * - /studyMaterials/{subject}/topics/{topicId}: Store study materials
 *
 * Key Security Decisions:
 * - User profiles and related data are strictly owned by the user. Only the authenticated user can read or modify their own profile data.
 * - Listing of users is disallowed to prevent unauthorized access to user information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the owner of the document, and that the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile.
     *   request.auth.uid: 'user123'
     *   request.resource.data.uid: 'user123'
     * @allow (get, update, delete) User with UID 'user123' reads/updates/deletes their profile.
     *   request.auth.uid: 'user123'
     *   resource.data.uid: 'user123'
     * @deny (create) User with UID 'user123' tries to create a profile for 'user456'.
     *   request.auth.uid: 'user123'
     *   request.resource.data.uid: 'user456'
     * @deny (get, update, delete) User with UID 'user123' tries to read/update/delete profile for 'user456'.
     *   request.auth.uid: 'user123'
     *   resource.data.uid: 'user456'
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for syllabus progress.
     * @path /users/{userId}/progress/syllabus
     * @allow (create, get, update, delete) User with UID 'user123' manages their syllabus progress.
     *   request.auth.uid: 'user123'
     * @deny (get, update, delete) User with UID 'user123' tries to manage syllabus progress for 'user456'.
     *   request.auth.uid: 'user123'
     * @principle Restricts access to a user's syllabus progress to the user themselves.
     */
    match /users/{userId}/progress/syllabus {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for mock test records.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create, get, update, delete) User with UID 'user123' manages their mock test records.
     *   request.auth.uid: 'user123'
     * @deny (get, update, delete) User with UID 'user123' tries to manage mock test records for 'user456'.
     *   request.auth.uid: 'user123'
     * @principle Restricts access to a user's mock test records to the user themselves.
     */
    match /users/{userId}/mockTests/{testId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for pomodoro progress.
     * @path /users/{userId}/progress/pomodoro
     * @allow (create, get, update, delete) User with UID 'user123' manages their pomodoro progress.
     *   request.auth.uid: 'user123'
     * @deny (get, update, delete) User with UID 'user123' tries to manage pomodoro progress for 'user456'.
     *   request.auth.uid: 'user123'
     * @principle Restricts access to a user's pomodoro progress to the user themselves.
     */
    match /users/{userId}/progress/pomodoro {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
        /**
     * @description Rules for study materials. Anyone can read, but only admins can write.
     * @path /studyMaterials/{subject}/topics/{topicId}
     * @allow (get, list) Anyone can read study materials.
     * @allow (create, update, delete) Only admins can write study materials.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /studyMaterials/{subject}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once the schema is updated with an admin roles field.
      allow update: if false; // TODO: Add admin validation once the schema is updated with an admin roles field.
      allow delete: if false; // TODO: Add admin validation once the schema is updated with an admin roles field.
    }
  }
}