/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows open read access to study materials.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - User-specific progress data (syllabus, mock tests, pomodoro) is nested under their respective `/users/{userId}` path.
 * - Study materials are stored under `/studyMaterials/{subjectId}/topics/{topicId}` and are publicly readable.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own profile and associated progress data.
 * - Listing of user documents is disallowed to protect user privacy.
 * - Study materials are publicly readable but only updatable/deletable by an admin (currently not implemented).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {bool} - True if the user ID matches the request's authentication UID.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing resource.
     *              This function combines the ownership check with the existence check.
     * @param {string} userId - The user ID to compare with the resource's ID.
     * @return {bool} - True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} - True if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for syllabus progress.
     * @path /users/{userId}/progress/syllabus
     */
    match /users/{userId}/progress/syllabus {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for mock test results.
     * @path /users/{userId}/mockTests/{testId}
     */
    match /users/{userId}/mockTests/{testId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for pomodoro progress.
     * @path /users/{userId}/progress/pomodoro
     */
    match /users/{userId}/progress/pomodoro {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for study materials.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

      /**
       * @description Wildcard match for all documents under a user.
       *              This rule ensures that any new collection added under /users/{userId}
       *              will also inherit the isOwner(userId) rule.
       */
    match /users/{userId}/{document=**} {
        allow read, write, create, update, delete: if isOwner(userId);
    }
  }
}