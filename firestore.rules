/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles, progress tracking, and mock test data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Only the user themselves can create, update, or delete their profile.
 * - /users/{userId}/progress/syllabus: Tracks syllabus progress for a user. Only the user can modify their own progress.
 * - /users/{userId}/mockTests/{testId}: Stores individual mock test records. Only the user can manage their own test records.
 * - /users/{userId}/progress/pomodoro: Tracks pomodoro session counts. Only the user can update their pomodoro progress.
 * - /studyMaterials/{subjectId}/topics/{topicId}: Stores study material links. This collection is publicly readable but only writeable by authorized users.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Strict ownership is enforced on all user-related data.
 * - Read-only access is granted to the /studyMaterials collection.
 *
 * Denormalization for Authorization: N/A - All ownership checks are based on the user ID in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   request.auth.uid == 'user123' and request.resource.data.uid == 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their profile.
     *   request.auth.uid == 'user123' and resource.data.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their profile.
     *   request.auth.uid == 'user123' and resource.data.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   request.auth.uid == 'user456' and request.resource.data.uid == 'user123'
     * @principle Enforces document ownership for writes, requires valid data on create.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to syllabus progress data for a specific user.
     * @path /users/{userId}/progress/syllabus
     * @allow (get) User with ID 'user123' can read their syllabus progress.
     *   request.auth.uid == 'user123'
     * @allow (create) User with ID 'user123' can create their syllabus progress document.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their syllabus progress.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their syllabus progress.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create syllabus progress for 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for syllabus progress data.
     */
    match /users/{userId}/progress/syllabus {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to individual mock test records for a specific user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (get) User with ID 'user123' can read their mock test record 'test456'.
     *   request.auth.uid == 'user123'
     * @allow (create) User with ID 'user123' can create a mock test record.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their mock test record 'test456'.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their mock test record 'test456'.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a mock test record for 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for mock test records.
     */
    match /users/{userId}/mockTests/{testId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to pomodoro progress data for a specific user.
     * @path /users/{userId}/progress/pomodoro
     * @allow (get) User with ID 'user123' can read their pomodoro progress.
     *   request.auth.uid == 'user123'
     * @allow (create) User with ID 'user123' can create their pomodoro progress document.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their pomodoro progress.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their pomodoro progress.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create pomodoro progress for 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for pomodoro progress data.
     */
    match /users/{userId}/progress/pomodoro {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to study material links for a given subject and topic.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get) Any user can read study material links.
     *   request.auth != null
     * @deny (create) No user can create study material links without authorization.
     *   request.auth != null
     * @deny (update) No user can update study material links without authorization.
     *   request.auth != null
     * @deny (delete) No user can delete study material links without authorization.
     *   request.auth != null
     * @principle Allows public read access, restricts write access.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorization check for creating study materials.
      allow update: if false; // TODO: Add authorization check for updating study materials.
      allow delete: if false; // TODO: Add authorization check for deleting study materials.
    }
  }
}