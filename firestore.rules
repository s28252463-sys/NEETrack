/**
 * @fileoverview Firestore Security Rules for the study application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, progress tracking, and mock tests.
 * Study materials are publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/progress/syllabus: Syllabus progress, owned by the user.
 * - /users/{userId}/mockTests/{testId}: Mock test records, owned by the user.
 * - /users/{userId}/progress/pomodoro: Pomodoro progress, owned by the user.
 * - /studyMaterials/{subjectId}/topics/{topicId}: Publicly accessible study materials.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data, progress, and mock tests.
 * - Study materials are publicly readable but not writable via the client.
 * - Listing of user documents is disallowed for privacy.
 *
 * Denormalization for Authorization:
 *  - User-specific data is stored under the /users/{userId} path, making ownership checks straightforward.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can read and write their own profiles.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get) User 'user_abc' can read their profile.
     * @allow (update) User 'user_abc' can update their profile.
     * @allow (delete) User 'user_abc' can delete their profile.
     * @deny (create) User 'user_xyz' cannot create a profile for 'user_abc'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure syllabus progress. Users can read and write their own progress.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) User 'user_abc' can create their syllabus progress if request.auth.uid == 'user_abc'.
     * @allow (get) User 'user_abc' can read their syllabus progress.
     * @allow (update) User 'user_abc' can update their syllabus progress.
     * @allow (delete) User 'user_abc' can delete their syllabus progress.
     * @deny (create) User 'user_xyz' cannot create syllabus progress for 'user_abc'.
     * @principle Enforces document ownership for syllabus progress.
     */
    match /users/{userId}/progress/syllabus {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure mock test records. Users can read, create, update, and delete their own test records.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) User 'user_abc' can create a mock test record under their profile.
     * @allow (get) User 'user_abc' can read a mock test record under their profile.
     * @allow (update) User 'user_abc' can update a mock test record under their profile.
     * @allow (delete) User 'user_abc' can delete a mock test record under their profile.
     * @deny (create) User 'user_xyz' cannot create a mock test record for 'user_abc'.
     * @principle Enforces document ownership for mock test records.
     */
    match /users/{userId}/mockTests/{testId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure pomodoro progress. Users can read and write their own pomodoro progress.
     * @path /users/{userId}/progress/pomodoro
     * @allow (create) User 'user_abc' can create pomodoro progress under their profile.
     * @allow (get) User 'user_abc' can read pomodoro progress under their profile.
     * @allow (update) User 'user_abc' can update pomodoro progress under their profile.
     * @allow (delete) User 'user_abc' can delete pomodoro progress under their profile.
     * @deny (create) User 'user_xyz' cannot create pomodoro progress for 'user_abc'.
     * @principle Enforces document ownership for pomodoro progress.
     */
    match /users/{userId}/progress/pomodoro {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Study materials are publicly accessible.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get) Any user can read study materials.
     * @allow (list) Any user can list study materials.
     * @deny (create) No user can create study materials via the client.
     * @deny (update) No user can update study materials via the client.
     * @deny (delete) No user can delete study materials via the client.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}