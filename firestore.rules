rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile.
     * @allow (get) User with UID 'user_abc' can read their own profile.
     * @allow (update) User with UID 'user_abc' can update their own profile.
     * @allow (delete) User with UID 'user_abc' can delete their own profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for user 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read the profile of user 'user_abc'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to syllabus progress documents for a specific user.
     * @path /users/{userId}/progress/syllabus
     * @allow (get) User with UID 'user_abc' can read their own syllabus progress.
     * @allow (create) User with UID 'user_abc' can create their own syllabus progress.
     * @allow (update) User with UID 'user_abc' can update their own syllabus progress.
     * @allow (delete) User with UID 'user_abc' can delete their own syllabus progress.
     * @deny (get) User with UID 'user_xyz' cannot read the syllabus progress of user 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create syllabus progress for user 'user_abc'.
     * @principle Restricts access to a user's own syllabus progress data.
     */
    match /users/{userId}/progress/syllabus {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to mock test documents for a specific user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (get) User with UID 'user_abc' can read their own mock test.
     * @allow (create) User with UID 'user_abc' can create their own mock test.
     * @allow (update) User with UID 'user_abc' can update their own mock test.
     * @allow (delete) User with UID 'user_abc' can delete their own mock test.
     * @deny (get) User with UID 'user_xyz' cannot read the mock test of user 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a mock test for user 'user_abc'.
     * @principle Restricts access to a user's own mock test data.
     */
    match /users/{userId}/mockTests/{testId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to study material documents. Allows public read, but restricts writes to the uploader.
     * @path /studyMaterials/{materialId}
     * @allow (get) Any user can read study material.
     * @allow (list) Any user can list study materials.
     * @allow (create) User with UID 'user_abc' can create study material with uploaderId 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update study material they uploaded (uploaderId is 'user_abc').
     * @allow (delete) User with UID 'user_abc' can delete study material they uploaded (uploaderId is 'user_abc').
     * @deny (create) User with UID 'user_xyz' cannot create study material with uploaderId 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update study material uploaded by user 'user_abc'.
     * @principle Allows public read access but enforces document ownership for writes.
     */
    match /studyMaterials/{materialId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.uploaderId == request.auth.uid;
      allow update: if request.auth != null && request.resource.data.uploaderId == request.auth.uid;
      allow delete: if request.auth != null && request.resource.data.uploaderId == request.auth.uid;
    }
  }
}