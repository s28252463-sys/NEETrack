/**
 * @file Firebase Security Rules for NEETrack App
 *
 * @description This ruleset enforces a strict user-ownership model for personal data
 * and allows public read access to syllabus-related data.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /syllabi/{syllabusId}: Stores syllabus data, publicly readable.
 * - /syllabi/{syllabusId}/subjects/{subjectId}: Stores subjects within a syllabus, publicly readable.
 * - /syllabi/{syllabusId}/subjects/{subjectId}/topics/{topicId}: Stores topics within a subject, publicly readable.
 * - /users/{userId}/topicCompletions/{topicCompletionId}: Stores topic completion statuses, accessible only by the user.
 * - /users/{userId}/studyGoals/{studyGoalId}: Stores study goals, accessible only by the user.
 *
 * @keySecurityDecisions
 * - Users can only access their own profile and associated data (topic completions, study goals).
 * - Syllabus, Subject and Topic data is publicly readable.
 * - Listing other user's study goals or topic completions is forbidden.
 * - No validation is performed on the content of the documents, focusing on ownership and access control.
 *
 * @denormalizationForAuthorization
 * - User-specific data (topicCompletions, studyGoals) are stored under the /users/{userId} collection group,
 *   allowing easy path-based ownership checks without additional `get()` calls.
 *
 * @structuralSegregation
 * - User-specific data is segregated under the /users/{userId} collection group,
 *   while syllabus and related data is stored in top-level collections for public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile when authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their profile when authenticated as 'user123'.
     * @deny (create, get, update, delete) User with ID 'user123' cannot access the profile of user 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to syllabi. All users can read syllabi. Write access is not granted.
     * @path /syllabi/{syllabusId}
     * @allow (get, list) Any user can read and list syllabi.
     * @deny (create, update, delete) No user can create, update, or delete syllabi.
     * @principle Public read access with no write access.
     */
    match /syllabi/{syllabusId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to subjects within a syllabus. All users can read subjects. Write access is not granted.
     * @path /syllabi/{syllabusId}/subjects/{subjectId}
     * @allow (get, list) Any user can read and list subjects.
     * @deny (create, update, delete) No user can create, update, or delete subjects.
     * @principle Public read access with no write access.
     */
    match /syllabi/{syllabusId}/subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to topics within a subject. All users can read topics. Write access is not granted.
     * @path /syllabi/{syllabusId}/subjects/{subjectId}/topics/{topicId}
     * @allow (get, list) Any user can read and list topics.
     * @deny (create, update, delete) No user can create, update, or delete topics.
     * @principle Public read access with no write access.
     */
    match /syllabi/{syllabusId}/subjects/{subjectId}/topics/{topicId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to user topic completion statuses. Only the authenticated user can manage their own topic completion statuses.
     * @path /users/{userId}/topicCompletions/{topicCompletionId}
     * @allow (create) User with ID 'user123' can create a topic completion status when authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own topic completion status when authenticated as 'user123'.
     * @deny (create, get, update, delete) User with ID 'user123' cannot access the topic completion status of user 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/topicCompletions/{topicCompletionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user study goals. Only the authenticated user can manage their own study goals.
     * @path /users/{userId}/studyGoals/{studyGoalId}
     * @allow (create) User with ID 'user123' can create a study goal when authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own study goal when authenticated as 'user123'.
     * @deny (create, get, update, delete) User with ID 'user123' cannot access the study goal of user 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/studyGoals/{studyGoalId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}