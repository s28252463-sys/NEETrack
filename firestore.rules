rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and that resource already exists.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own profile.
     * @allow (get) User 'user_abc' can read their own profile.
     * @allow (update) User 'user_abc' can update their own profile.
     * @allow (delete) User 'user_abc' can delete their own profile.
     * @deny (create) User 'user_xyz' cannot create a profile for 'user_abc'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for syllabus progress.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) User 'user_abc' can create their syllabus progress.
     * @allow (get) User 'user_abc' can read their syllabus progress.
     * @allow (update) User 'user_abc' can update their syllabus progress.
     * @allow (delete) User 'user_abc' can delete their syllabus progress.
     * @deny (create) User 'user_xyz' cannot create syllabus progress for 'user_abc'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/progress/syllabus {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for mock test records.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) User 'user_abc' can create a mock test record.
     * @allow (get) User 'user_abc' can read their mock test record.
     * @allow (update) User 'user_abc' can update their mock test record.
     * @allow (delete) User 'user_abc' can delete their mock test record.
     * @deny (create) User 'user_xyz' cannot create a mock test record for 'user_abc'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/mockTests/{testId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for pomodoro progress.
     * @path /users/{userId}/progress/pomodoro
     * @allow (create) User 'user_abc' can create their pomodoro progress.
     * @allow (get) User 'user_abc' can read their pomodoro progress.
     * @allow (update) User 'user_abc' can update their pomodoro progress.
     * @allow (delete) User 'user_abc' can delete their pomodoro progress.
     * @deny (create) User 'user_xyz' cannot create pomodoro progress for 'user_abc'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/progress/pomodoro {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for study materials.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get) Anyone can read study materials.
     * @deny (create) No one can create study materials (explicitly denied).
     * @deny (update) No one can update study materials (explicitly denied).
     * @deny (delete) No one can delete study materials (explicitly denied).
     * @principle Allows public read access but restricts write access.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin-only validation once admin roles are established.
      allow update: if false; // TODO: Add admin-only validation once admin roles are established.
      allow delete: if false; // TODO: Add admin-only validation once admin roles are established.
    }
  }
}