/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and their associated data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /users/{userId}/progress/syllabus: Tracks syllabus progress for a user.
 * - /users/{userId}/mockTests/{testId}: Stores mock test results for a user.
 * - /users/{userId}/progress/pomodoro: Stores pomodoro progress for a user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of user profiles is disallowed.
 * - Subcollections under /users/{userId} inherit the same ownership restrictions.
 * - The "studyMaterials" collection and its contents are currently unprotected and need to be secured.
 *
 * Denormalization for Authorization:
 * - The user ID is used in the path for all user-specific data, which is then compared to request.auth.uid for authorization.  No additional denormalization is required, as the path itself provides the necessary ownership context.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get) Signed-in user can read their own profile.
     * @allow (update) Signed-in user can update their own profile.
     * @allow (delete) Signed-in user can delete their own profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to syllabus progress documents for a user.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) Signed-in user can create their own syllabus progress.
     * @allow (get) Signed-in user can read their own syllabus progress.
     * @allow (update) Signed-in user can update their own syllabus progress.
     * @allow (delete) Signed-in user can delete their own syllabus progress.
     * @deny (list) Listing syllabus progress is not allowed.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/progress/syllabus {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to mock test documents for a user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) Signed-in user can create their own mock test.
     * @allow (get) Signed-in user can read their own mock test.
     * @allow (update) Signed-in user can update their own mock test.
     * @allow (delete) Signed-in user can delete their own mock test.
     * @deny (list) Signed-in user can list their own mock tests.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/mockTests/{testId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Controls access to pomodoro progress documents for a user.
     * @path /users/{userId}/progress/pomodoro
     * @allow (create) Signed-in user can create their own pomodoro progress.
     * @allow (get) Signed-in user can read their own pomodoro progress.
     * @allow (update) Signed-in user can update their own pomodoro progress.
     * @allow (delete) Signed-in user can delete their own pomodoro progress.
     * @deny (list) Listing pomodoro progress is not allowed.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/progress/pomodoro {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }
    /**
     * @description PlaceHolder: Controls access to study materials.
     * @path /studyMaterials/{subject}/topics/{topicId}
     * @allow (create) Signed-in user can create a topic.
     * @allow (get) Signed-in user can read the topic.
     * @allow (update) Signed-in user can update the topic.
     * @allow (delete) Signed-in user can delete the topic.
     * @allow (list) Any user can list topics.
     */
    match /studyMaterials/{subject}/topics/{topicId} {
        // TODO: Add owner validation once the schema is updated with an ownership field.
        allow create, update, delete: if false;
        allow get, list: if true;
    }
  }
}