/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to study materials.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /users/{userId}/progress/syllabus: Stores the syllabus progress for a specific user.
 * - /users/{userId}/mockTests/{testId}: Stores mock test records for a specific user.
 * - /users/{userId}/progress/pomodoro: Stores pomodoro session counts for a user.
 * - /studyMaterials/{subjectId}/topics/{topicId}: Stores public study materials.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and related progress/test information.
 * - Study materials are publicly readable but not writable through the client.
 * - User listing is disallowed for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) Any user can read any profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create profile with ID 'user123'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user syllabus progress.
     * @path /users/{userId}/progress/syllabus
     * @allow (get) User with UID 'user123' can get their syllabus progress.
     * @allow (list) User with UID 'user123' can list their syllabus progress.
     * @allow (create) User with UID 'user123' can create their syllabus progress.
     * @allow (update) User with UID 'user123' can update their syllabus progress.
     * @allow (delete) User with UID 'user123' can delete their syllabus progress.
     * @deny (get) User with UID 'user456' cannot get user 'user123' syllabus progress.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/syllabus {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user mock test records.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (get) User with UID 'user123' can get their mock test record.
     * @allow (list) User with UID 'user123' can list their mock test records.
     * @allow (create) User with UID 'user123' can create a mock test record.
     * @allow (update) User with UID 'user123' can update their mock test record.
     * @allow (delete) User with UID 'user123' can delete their mock test record.
     * @deny (get) User with UID 'user456' cannot get user 'user123' mock test record.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mockTests/{testId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user pomodoro progress.
     * @path /users/{userId}/progress/pomodoro
     * @allow (get) User with UID 'user123' can get their pomodoro progress.
     * @allow (list) User with UID 'user123' can list their pomodoro progress.
     * @allow (create) User with UID 'user123' can create their pomodoro progress.
     * @allow (update) User with UID 'user123' can update their pomodoro progress.
     * @allow (delete) User with UID 'user123' can delete their pomodoro progress.
     * @deny (get) User with UID 'user456' cannot get user 'user123' pomodoro progress.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/pomodoro {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to study materials.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get) Any user can read study materials.
     * @allow (list) Any user can list study materials.
     * @deny (create) No user can create study materials.
     * @deny (update) No user can update study materials.
     * @deny (delete) No user can delete study materials.
     * @principle Allows public read access, restricts writes.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}