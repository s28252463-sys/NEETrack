/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, progress tracking, and mock test data.
 * Study materials are publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/progress/syllabus: Syllabus progress, owned by the user.
 * - /users/{userId}/mockTests/{testId}: Mock test records, owned by the user.
 * - /users/{userId}/progress/pomodoro: Pomodoro progress, owned by the user.
 * - /studyMaterials/{subjectId}/topics/{topicId}: Publicly accessible study materials.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data, syllabus progress, pomodoro progress and mock test data.
 * - Study materials are publicly readable but not writable via the client.
 * - Listing of documents in mockTests and syllabus progress is allowed only for the owner.
 *
 * Denormalization for Authorization:
 *  - The rules rely on the `userId` path segment to enforce ownership, ensuring that all data under a `/users/{userId}` path is owned by that user.
 *  - No denormalization is explicitly used, as the path-based ownership model is sufficient.
 *
 * Structural Segregation:
 *  - Private user data is stored under the `/users/{userId}` collection, while public study material data is stored in the top-level `/studyMaterials` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile.
     * @allow (get) User with UID 'user_abc' can read their own profile.
     * @allow (update) User with UID 'user_abc' can update their own profile.
     * @allow (delete) User with UID 'user_abc' can delete their own profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read the profile of 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the profile of 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the profile of 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to syllabus progress for a specific user.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) User with UID 'user_abc' can create syllabus progress data.
     * @allow (get) User with UID 'user_abc' can read their syllabus progress data.
     * @allow (update) User with UID 'user_abc' can update their syllabus progress data.
     * @allow (delete) User with UID 'user_abc' can delete their syllabus progress data.
     * @deny (create) User with UID 'user_xyz' cannot create syllabus progress data for 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read the syllabus progress data of 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the syllabus progress data of 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the syllabus progress data of 'user_abc'.
     * @principle Restricts access to a user's own syllabus progress data.
     */
    match /users/{userId}/progress/syllabus {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isSignedIn() {
            return request.auth != null;
        }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to mock test records for a specific user.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) User with UID 'user_abc' can create a mock test record.
     * @allow (get) User with UID 'user_abc' can read their mock test record.
     * @allow (update) User with UID 'user_abc' can update their mock test record.
     * @allow (delete) User with UID 'user_abc' can delete their mock test record.
     * @deny (create) User with UID 'user_xyz' cannot create a mock test record for 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read the mock test record of 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the mock test record of 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the mock test record of 'user_abc'.
     * @principle Restricts access to a user's own mock test records.
     */
    match /users/{userId}/mockTests/{testId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isSignedIn() {
            return request.auth != null;
        }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to pomodoro progress for a specific user.
     * @path /users/{userId}/progress/pomodoro
     * @allow (create) User with UID 'user_abc' can create pomodoro progress data.
     * @allow (get) User with UID 'user_abc' can read their pomodoro progress data.
     * @allow (update) User with UID 'user_abc' can update their pomodoro progress data.
     * @allow (delete) User with UID 'user_abc' can delete their pomodoro progress data.
     * @deny (create) User with UID 'user_xyz' cannot create pomodoro progress data for 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read the pomodoro progress data of 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the pomodoro progress data of 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the pomodoro progress data of 'user_abc'.
     * @principle Restricts access to a user's own pomodoro progress data.
     */
    match /users/{userId}/progress/pomodoro {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isSignedIn() {
            return request.auth != null;
        }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to study materials.  Study materials are publicly readable, but not writable by clients.
     * @path /studyMaterials/{subjectId}/topics/{topicId}
     * @allow (get) Any user can read study materials.
     * @allow (list) Any user can list study materials.
     * @deny (create) No user can create study materials via the client.
     * @deny (update) No user can update study materials via the client.
     * @deny (delete) No user can delete study materials via the client.
     * @principle Public read access with no client-side writes.
     */
    match /studyMaterials/{subjectId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}