/**
 * @description This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 * @dataStructure
 * - User profiles are stored under `/users/{userId}`.
 * - Syllabus progress is stored under `/users/{userId}/progress/syllabus`.
 * - Mock test results are stored under `/users/{userId}/mockTests/{testId}`.
 * @keySecurityDecisions
 * - Users can only read and write their own profile data.
 * - Users can only read and write their own syllabus progress data.
 * - Users can only read and write their own mock test data.
 * - Listing of users is disallowed.
 * @denormalizationForAuthorization N/A
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile document.
     * @deny (create) - User with UID 'user456' cannot create a profile document for user 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile document for user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to syllabus progress documents.
     * @path /users/{userId}/progress/syllabus
     * @allow (create) - User with UID 'user123' can create their own syllabus progress document.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own syllabus progress document.
     * @deny (create) - User with UID 'user456' cannot create a syllabus progress document for user 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the syllabus progress document for user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/syllabus {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mock test documents.
     * @path /users/{userId}/mockTests/{testId}
     * @allow (create) - User with UID 'user123' can create their own mock test document.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own mock test document.
     * @deny (create) - User with UID 'user456' cannot create a mock test document for user 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the mock test document for user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mockTests/{testId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

        /**
     * @description Controls access to syllabus progress documents.
     * @path /users/{userId}/progress/pomodoro
     * @allow (get) - User with UID 'user123' can read their own pomodoro progress document.
     * @deny (get) - User with UID 'user456' cannot read the pomodoro progress document for user 'user123'.
     * @principle Enforces document ownership for read operations.
     */
        match /users/{userId}/progress/pomodoro {
            function isSignedIn() {
                return request.auth != null;
            }

            function isOwner(userId) {
                return request.auth.uid == userId;
            }
            function isExistingOwner(userId) {
                return isOwner(userId) && resource != null;
            }
            allow get: if isOwner(userId);
            allow list: if isOwner(userId);
            allow create: if isSignedIn() && isOwner(userId);
            allow update: if isExistingOwner(userId);
            allow delete: if isExistingOwner(userId);
        }
  }
}